"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[4671],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return k}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),s=c(n),k=i,m=s["".concat(o,".").concat(k)]||s[k]||u[k]||a;return n?r.createElement(m,l(l({ref:t},p),{},{components:n})):r.createElement(m,l({ref:t},p))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=s;var d={};for(var o in t)hasOwnProperty.call(t,o)&&(d[o]=t[o]);d.originalType=e,d.mdxType="string"==typeof e?e:i,l[1]=d;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},2679:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return p},default:function(){return s}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),l=["components"],d={id:"JoinGreatCircleToPointBuilder",title:"Class: JoinGreatCircleToPointBuilder",sidebar_label:"JoinGreatCircleToPointBuilder",sidebar_position:0,custom_edit_url:null},o=void 0,c={unversionedId:"framework/classes/JoinGreatCircleToPointBuilder",id:"framework/classes/JoinGreatCircleToPointBuilder",isDocsHomePage:!1,title:"Class: JoinGreatCircleToPointBuilder",description:"Builds paths connecting initial great-circle paths to final great-circle paths terminating at defined end points.",source:"@site/docs/framework/classes/JoinGreatCircleToPointBuilder.md",sourceDirName:"framework/classes",slug:"/framework/classes/JoinGreatCircleToPointBuilder",permalink:"/msfs-avionics-mirror/docs/framework/classes/JoinGreatCircleToPointBuilder",editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"JoinGreatCircleToPointBuilder",title:"Class: JoinGreatCircleToPointBuilder",sidebar_label:"JoinGreatCircleToPointBuilder",sidebar_position:0,custom_edit_url:null},sidebar:"docsSidebar",previous:{title:"IntervalPacer",permalink:"/msfs-avionics-mirror/docs/framework/classes/IntervalPacer"},next:{title:"KeyInterceptManager",permalink:"/msfs-avionics-mirror/docs/framework/classes/KeyInterceptManager"}},p=[{value:"Constructors",id:"constructors",children:[{value:"constructor",id:"constructor",children:[],level:3}],level:2},{value:"Properties",id:"properties",children:[{value:"circleVectorBuilder",id:"circlevectorbuilder",children:[{value:"Defined in",id:"defined-in",children:[],level:4}],level:3},{value:"connectCirclesBuilder",id:"connectcirclesbuilder",children:[{value:"Defined in",id:"defined-in-1",children:[],level:4}],level:3},{value:"greatCircleBuilder",id:"greatcirclebuilder",children:[{value:"Defined in",id:"defined-in-2",children:[],level:4}],level:3},{value:"turnToJoinGreatCircleAtPointBuilder",id:"turntojoingreatcircleatpointbuilder",children:[{value:"Defined in",id:"defined-in-3",children:[],level:4}],level:3},{value:"turnToJoinGreatCircleBuilder",id:"turntojoingreatcirclebuilder",children:[{value:"Defined in",id:"defined-in-4",children:[],level:4}],level:3},{value:"geoCircleCache",id:"geocirclecache",children:[{value:"Defined in",id:"defined-in-5",children:[],level:4}],level:3},{value:"intersectionCache",id:"intersectioncache",children:[{value:"Defined in",id:"defined-in-6",children:[],level:4}],level:3},{value:"vec3Cache",id:"vec3cache",children:[{value:"Defined in",id:"defined-in-7",children:[],level:4}],level:3}],level:2},{value:"Methods",id:"methods",children:[{value:"build",id:"build",children:[{value:"Parameters",id:"parameters",children:[],level:4},{value:"Returns",id:"returns",children:[],level:4},{value:"Defined in",id:"defined-in-8",children:[],level:4}],level:3}],level:2}],u={toc:p};function s(e){var t=e.components,n=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Builds paths connecting initial great-circle paths to final great-circle paths terminating at defined end points."),(0,a.kt)("h2",{id:"constructors"},"Constructors"),(0,a.kt)("h3",{id:"constructor"},"constructor"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("strong",{parentName:"p"},"new JoinGreatCircleToPointBuilder"),"()"),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("h3",{id:"circlevectorbuilder"},"circleVectorBuilder"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,a.kt)("strong",{parentName:"p"},"circleVectorBuilder"),": ",(0,a.kt)("a",{parentName:"p",href:"CircleVectorBuilder"},(0,a.kt)("inlineCode",{parentName:"a"},"CircleVectorBuilder"))),(0,a.kt)("h4",{id:"defined-in"},"Defined in"),(0,a.kt)("p",null,"src/sdk/flightplan/FlightPathVectorBuilder.ts:852"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"connectcirclesbuilder"},"connectCirclesBuilder"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,a.kt)("strong",{parentName:"p"},"connectCirclesBuilder"),": ",(0,a.kt)("a",{parentName:"p",href:"ConnectCirclesBuilder"},(0,a.kt)("inlineCode",{parentName:"a"},"ConnectCirclesBuilder"))),(0,a.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,a.kt)("p",null,"src/sdk/flightplan/FlightPathVectorBuilder.ts:854"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"greatcirclebuilder"},"greatCircleBuilder"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,a.kt)("strong",{parentName:"p"},"greatCircleBuilder"),": ",(0,a.kt)("a",{parentName:"p",href:"GreatCircleBuilder"},(0,a.kt)("inlineCode",{parentName:"a"},"GreatCircleBuilder"))),(0,a.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,a.kt)("p",null,"src/sdk/flightplan/FlightPathVectorBuilder.ts:853"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"turntojoingreatcircleatpointbuilder"},"turnToJoinGreatCircleAtPointBuilder"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,a.kt)("strong",{parentName:"p"},"turnToJoinGreatCircleAtPointBuilder"),": ",(0,a.kt)("a",{parentName:"p",href:"TurnToJoinGreatCircleAtPointBuilder"},(0,a.kt)("inlineCode",{parentName:"a"},"TurnToJoinGreatCircleAtPointBuilder"))),(0,a.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,a.kt)("p",null,"src/sdk/flightplan/FlightPathVectorBuilder.ts:856"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"turntojoingreatcirclebuilder"},"turnToJoinGreatCircleBuilder"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,a.kt)("strong",{parentName:"p"},"turnToJoinGreatCircleBuilder"),": ",(0,a.kt)("a",{parentName:"p",href:"TurnToJoinGreatCircleBuilder"},(0,a.kt)("inlineCode",{parentName:"a"},"TurnToJoinGreatCircleBuilder"))),(0,a.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,a.kt)("p",null,"src/sdk/flightplan/FlightPathVectorBuilder.ts:855"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"geocirclecache"},"geoCircleCache"),(0,a.kt)("p",null,"\u25aa ",(0,a.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,a.kt)("strong",{parentName:"p"},"geoCircleCache"),": ",(0,a.kt)("a",{parentName:"p",href:"GeoCircle"},(0,a.kt)("inlineCode",{parentName:"a"},"GeoCircle")),"[]"),(0,a.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,a.kt)("p",null,"src/sdk/flightplan/FlightPathVectorBuilder.ts:849"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"intersectioncache"},"intersectionCache"),(0,a.kt)("p",null,"\u25aa ",(0,a.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,a.kt)("strong",{parentName:"p"},"intersectionCache"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"Float64Array"),"[]"),(0,a.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,a.kt)("p",null,"src/sdk/flightplan/FlightPathVectorBuilder.ts:850"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"vec3cache"},"vec3Cache"),(0,a.kt)("p",null,"\u25aa ",(0,a.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,a.kt)("strong",{parentName:"p"},"vec3Cache"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"Float64Array"),"[]"),(0,a.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,a.kt)("p",null,"src/sdk/flightplan/FlightPathVectorBuilder.ts:848"),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"build"},"build"),(0,a.kt)("p",null,"\u25b8 ",(0,a.kt)("strong",{parentName:"p"},"build"),"(",(0,a.kt)("inlineCode",{parentName:"p"},"vectors"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"index"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"start"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"startPath"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"end"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"endPath"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"desiredTurnDirection?"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"minTurnRadius?"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"preferSingleTurn?"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"intersection?"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"flags?"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"includeTurnToCourseFlag?"),"): ",(0,a.kt)("inlineCode",{parentName:"p"},"number")),(0,a.kt)("p",null,"Builds a sequence of vectors representing a path from a defined start point and initial course which turns and\njoins a great-circle path which terminates at a defined end point."),(0,a.kt)("h4",{id:"parameters"},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"vectors")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"../interfaces/CircleVector"},(0,a.kt)("inlineCode",{parentName:"a"},"CircleVector")),"[]"),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"undefined")),(0,a.kt)("td",{parentName:"tr",align:"left"},"The flight path vector sequence to which to add the vectors.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"index")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"number")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"undefined")),(0,a.kt)("td",{parentName:"tr",align:"left"},"The index in the sequence at which to add the vectors.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"start")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"../interfaces/LatLonInterface"},(0,a.kt)("inlineCode",{parentName:"a"},"LatLonInterface"))," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"Float64Array")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"undefined")),(0,a.kt)("td",{parentName:"tr",align:"left"},"The start point.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"startPath")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"GeoCircle"},(0,a.kt)("inlineCode",{parentName:"a"},"GeoCircle"))),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"undefined")),(0,a.kt)("td",{parentName:"tr",align:"left"},"The great-circle path defining the initial course.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"end")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"../interfaces/LatLonInterface"},(0,a.kt)("inlineCode",{parentName:"a"},"LatLonInterface"))," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"Float64Array")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"undefined")),(0,a.kt)("td",{parentName:"tr",align:"left"},"The end point.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"endPath")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"GeoCircle"},(0,a.kt)("inlineCode",{parentName:"a"},"GeoCircle"))),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"undefined")),(0,a.kt)("td",{parentName:"tr",align:"left"},"The great-circle path defining the final course.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"desiredTurnDirection?")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"../modules#vectorturndirection"},(0,a.kt)("inlineCode",{parentName:"a"},"VectorTurnDirection"))),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"undefined")),(0,a.kt)("td",{parentName:"tr",align:"left"},"The desired initial turn direction. If not defined, the most efficient turn direction that satisfies the constraints will be chosen.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"minTurnRadius?")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"number")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"undefined")),(0,a.kt)("td",{parentName:"tr",align:"left"},"The minimum turn radius, in meters. Defaults to 0.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"preferSingleTurn")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"false")),(0,a.kt)("td",{parentName:"tr",align:"left"},"Whether to prefer flight path solutions that consist of a single constant-radius turn from the initial to final course. False by default.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"intersection?")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"Float64Array")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"undefined")),(0,a.kt)("td",{parentName:"tr",align:"left"},"The point of intersection between the start and end paths closest to the start point. If not defined, it will be calculated.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"flags")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"number")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"0")),(0,a.kt)("td",{parentName:"tr",align:"left"},"The flags to set on the vectors. Defaults to none (0).")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"includeTurnToCourseFlag")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"true")),(0,a.kt)("td",{parentName:"tr",align:"left"},"Whether to include the ",(0,a.kt)("inlineCode",{parentName:"td"},"TurnToCourse")," flag on the turn vectors. True by default.")))),(0,a.kt)("h4",{id:"returns"},"Returns"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"number")),(0,a.kt)("p",null,"The number of vectors added to the sequence."),(0,a.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,a.kt)("p",null,"src/sdk/flightplan/FlightPathVectorBuilder.ts:878"))}s.isMDXComponent=!0}}]);