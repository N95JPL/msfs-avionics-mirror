"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[2355],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return s}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),c=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),k=c(n),s=a,f=k["".concat(d,".").concat(s)]||k[s]||m[s]||i;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function s(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=k;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},3678:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return d},metadata:function(){return c},toc:function(){return p},default:function(){return k}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],o={id:"ConnectCirclesBuilder",title:"Class: ConnectCirclesBuilder",sidebar_label:"ConnectCirclesBuilder",sidebar_position:0,custom_edit_url:null},d=void 0,c={unversionedId:"framework/classes/ConnectCirclesBuilder",id:"framework/classes/ConnectCirclesBuilder",isDocsHomePage:!1,title:"Class: ConnectCirclesBuilder",description:"Builds paths to connect two geo circles.",source:"@site/docs/framework/classes/ConnectCirclesBuilder.md",sourceDirName:"framework/classes",slug:"/framework/classes/ConnectCirclesBuilder",permalink:"/msfs-avionics-mirror/docs/framework/classes/ConnectCirclesBuilder",editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"ConnectCirclesBuilder",title:"Class: ConnectCirclesBuilder",sidebar_label:"ConnectCirclesBuilder",sidebar_position:0,custom_edit_url:null},sidebar:"docsSidebar",previous:{title:"ComputedSubject",permalink:"/msfs-avionics-mirror/docs/framework/classes/ComputedSubject"},next:{title:"Consumer",permalink:"/msfs-avionics-mirror/docs/framework/classes/Consumer"}},p=[{value:"Constructors",id:"constructors",children:[{value:"constructor",id:"constructor",children:[],level:3}],level:2},{value:"Properties",id:"properties",children:[{value:"circleVectorBuilder",id:"circlevectorbuilder",children:[{value:"Defined in",id:"defined-in",children:[],level:4}],level:3},{value:"geoCircleCache",id:"geocirclecache",children:[{value:"Defined in",id:"defined-in-1",children:[],level:4}],level:3},{value:"intersectionCache",id:"intersectioncache",children:[{value:"Defined in",id:"defined-in-2",children:[],level:4}],level:3},{value:"vec3Cache",id:"vec3cache",children:[{value:"Defined in",id:"defined-in-3",children:[],level:4}],level:3}],level:2},{value:"Methods",id:"methods",children:[{value:"build",id:"build",children:[{value:"Parameters",id:"parameters",children:[],level:4},{value:"Returns",id:"returns",children:[],level:4},{value:"Defined in",id:"defined-in-4",children:[],level:4}],level:3},{value:"calculateJoinCirclesPathDistance",id:"calculatejoincirclespathdistance",children:[{value:"Parameters",id:"parameters-1",children:[],level:4},{value:"Returns",id:"returns-1",children:[],level:4},{value:"Defined in",id:"defined-in-5",children:[],level:4}],level:3},{value:"findCircleToJoinCircles",id:"findcircletojoincircles",children:[{value:"Parameters",id:"parameters-2",children:[],level:4},{value:"Returns",id:"returns-2",children:[],level:4},{value:"Defined in",id:"defined-in-6",children:[],level:4}],level:3}],level:2}],m={toc:p};function k(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Builds paths to connect two geo circles."),(0,i.kt)("h2",{id:"constructors"},"Constructors"),(0,i.kt)("h3",{id:"constructor"},"constructor"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"new ConnectCirclesBuilder"),"()"),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"circlevectorbuilder"},"circleVectorBuilder"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,i.kt)("strong",{parentName:"p"},"circleVectorBuilder"),": ",(0,i.kt)("a",{parentName:"p",href:"CircleVectorBuilder"},(0,i.kt)("inlineCode",{parentName:"a"},"CircleVectorBuilder"))),(0,i.kt)("h4",{id:"defined-in"},"Defined in"),(0,i.kt)("p",null,"src/sdk/flightplan/FlightPathVectorBuilder.ts:564"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"geocirclecache"},"geoCircleCache"),(0,i.kt)("p",null,"\u25aa ",(0,i.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,i.kt)("strong",{parentName:"p"},"geoCircleCache"),": ",(0,i.kt)("a",{parentName:"p",href:"GeoCircle"},(0,i.kt)("inlineCode",{parentName:"a"},"GeoCircle")),"[]"),(0,i.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,i.kt)("p",null,"src/sdk/flightplan/FlightPathVectorBuilder.ts:555"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"intersectioncache"},"intersectionCache"),(0,i.kt)("p",null,"\u25aa ",(0,i.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,i.kt)("strong",{parentName:"p"},"intersectionCache"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"Float64Array"),"[]"),(0,i.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,i.kt)("p",null,"src/sdk/flightplan/FlightPathVectorBuilder.ts:562"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"vec3cache"},"vec3Cache"),(0,i.kt)("p",null,"\u25aa ",(0,i.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,i.kt)("strong",{parentName:"p"},"vec3Cache"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"Float64Array"),"[]"),(0,i.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,i.kt)("p",null,"src/sdk/flightplan/FlightPathVectorBuilder.ts:551"),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"build"},"build"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"build"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"vectors"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"index"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"fromCircle"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"toCircle"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"radius?"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"from?"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"to?"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"fromCircleVectorFlags?"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"toCircleVectorFlags?"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"connectVectorFlags?"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"number")),(0,i.kt)("p",null,"Builds a sequence of vectors representing a path which consists of a single geo circle which connects two other\ncircles and optionally paths to link the connecting circle with a start point on the from circle and an end point\non the to circle."),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"vectors")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../interfaces/CircleVector"},(0,i.kt)("inlineCode",{parentName:"a"},"CircleVector")),"[]"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"undefined")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The flight path vector sequence to which to add the vectors.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"index")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"undefined")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The index in the sequence at which to add the vectors.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"fromCircle")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"GeoCircle"},(0,i.kt)("inlineCode",{parentName:"a"},"GeoCircle"))),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"undefined")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The circle from which to add the connecting circle.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"toCircle")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"GeoCircle"},(0,i.kt)("inlineCode",{parentName:"a"},"GeoCircle"))),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"undefined")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The circle to which to add the connecting circle.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"radius?")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"undefined")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The radius, in meters, of the circle to join the two circles. If not defined, defaults to pi / 2 times the radius of the Earth (and therefore the connecting circle will be a great circle).")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"from?")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../interfaces/LatLonInterface"},(0,i.kt)("inlineCode",{parentName:"a"},"LatLonInterface"))," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"Float64Array")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"undefined")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The starting point along ",(0,i.kt)("inlineCode",{parentName:"td"},"fromCircle"),". If not defined, this will be assumed to be equal to the point where the connecting circle meets ",(0,i.kt)("inlineCode",{parentName:"td"},"fromCircle"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"to?")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../interfaces/LatLonInterface"},(0,i.kt)("inlineCode",{parentName:"a"},"LatLonInterface"))," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"Float64Array")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"undefined")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The ending point along ",(0,i.kt)("inlineCode",{parentName:"td"},"toCircle"),". If not defined, this will be assumed to be equal to the point where the connecting circle meets ",(0,i.kt)("inlineCode",{parentName:"td"},"toCircle"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"fromCircleVectorFlags")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"0")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The flags to set on the vector along ",(0,i.kt)("inlineCode",{parentName:"td"},"fromCircle"),". Defaults to none (0).")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"toCircleVectorFlags")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"0")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The flags to set on the vector along the ",(0,i.kt)("inlineCode",{parentName:"td"},"toCircle"),". Defaults to none (0).")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"connectVectorFlags")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"0")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The flags to set on the vector connecting ",(0,i.kt)("inlineCode",{parentName:"td"},"fromCircle")," to ",(0,i.kt)("inlineCode",{parentName:"td"},"toCircle"),". Defaults to none (0).")))),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"number")),(0,i.kt)("p",null,"The number of vectors added to the sequence."),(0,i.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,i.kt)("p",null,"src/sdk/flightplan/FlightPathVectorBuilder.ts:586"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"calculatejoincirclespathdistance"},"calculateJoinCirclesPathDistance"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,i.kt)("strong",{parentName:"p"},"calculateJoinCirclesPathDistance"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"fromCircle"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"toCircle"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"joinCircle"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"from?"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"to?"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"number")),(0,i.kt)("p",null,"Calculates the total distance along the joining path between two circles."),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"fromCircle")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"GeoCircle"},(0,i.kt)("inlineCode",{parentName:"a"},"GeoCircle"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"The circle at the beginning of the connecting circle.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"toCircle")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"GeoCircle"},(0,i.kt)("inlineCode",{parentName:"a"},"GeoCircle"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"The circle at the end of the connecting circle.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"joinCircle")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"GeoCircle"},(0,i.kt)("inlineCode",{parentName:"a"},"GeoCircle"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"The connecting circle.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"from?")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Float64Array")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The starting point along ",(0,i.kt)("inlineCode",{parentName:"td"},"fromCircle"),". If not defined, this will be assumed to be equal to the point where the connecting circle meets ",(0,i.kt)("inlineCode",{parentName:"td"},"fromCircle"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"to?")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Float64Array")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The ending point along ",(0,i.kt)("inlineCode",{parentName:"td"},"toCircle"),". If not defined, this will be assumed to be equal to the point where the connecting circle meets ",(0,i.kt)("inlineCode",{parentName:"td"},"toCircle"),".")))),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"number")),(0,i.kt)("p",null,"the total distance along the joining path, in great-arc radians."),(0,i.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,i.kt)("p",null,"src/sdk/flightplan/FlightPathVectorBuilder.ts:745"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"findcircletojoincircles"},"findCircleToJoinCircles"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,i.kt)("strong",{parentName:"p"},"findCircleToJoinCircles"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"fromCircle"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"toCircle"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"radius"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"out"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"from?"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"to?"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,i.kt)("a",{parentName:"p",href:"GeoCircle"},(0,i.kt)("inlineCode",{parentName:"a"},"GeoCircle"))),(0,i.kt)("p",null,"Finds a GeoCircle which connects (is tangent to) two other circles."),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"fromCircle")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"GeoCircle"},(0,i.kt)("inlineCode",{parentName:"a"},"GeoCircle"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"The circle at the beginning of the connecting circle.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"toCircle")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"GeoCircle"},(0,i.kt)("inlineCode",{parentName:"a"},"GeoCircle"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"The circle at the end of the connecting circle.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"radius")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The desired radius of the connecting circle, in great-arc radians.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"out")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"GeoCircle"},(0,i.kt)("inlineCode",{parentName:"a"},"GeoCircle"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"A GeoCircle object to which to write the result.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"from?")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Float64Array")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The starting point along ",(0,i.kt)("inlineCode",{parentName:"td"},"fromCircle"),". If not defined, this will be assumed to be equal to the point where the connecting circle meets ",(0,i.kt)("inlineCode",{parentName:"td"},"fromCircle"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"to?")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Float64Array")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The ending point along ",(0,i.kt)("inlineCode",{parentName:"td"},"toCircle"),". If not defined, this will be assumed to be equal to the point where the connecting circle meets ",(0,i.kt)("inlineCode",{parentName:"td"},"toCircle"),".")))),(0,i.kt)("h4",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,i.kt)("a",{parentName:"p",href:"GeoCircle"},(0,i.kt)("inlineCode",{parentName:"a"},"GeoCircle"))),(0,i.kt)("p",null,"a GeoCircle which connects the two circles, or null if one could not be found."),(0,i.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,i.kt)("p",null,"src/sdk/flightplan/FlightPathVectorBuilder.ts:664"))}k.isMDXComponent=!0}}]);