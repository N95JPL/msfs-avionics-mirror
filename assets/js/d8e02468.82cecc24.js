"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[1318],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(r),m=a,k=u["".concat(l,".").concat(m)]||u[m]||c[m]||i;return r?n.createElement(k,s(s({ref:t},p),{},{components:r})):n.createElement(k,s({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var d=2;d<i;d++)s[d]=r[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},9892:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return p},default:function(){return u}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),s=["components"],o={id:"NearestLodBoundarySearchSession",title:"Class: NearestLodBoundarySearchSession",sidebar_label:"NearestLodBoundarySearchSession",sidebar_position:0,custom_edit_url:null},l=void 0,d={unversionedId:"framework/classes/NearestLodBoundarySearchSession",id:"framework/classes/NearestLodBoundarySearchSession",isDocsHomePage:!1,title:"Class: NearestLodBoundarySearchSession",description:"A nearest search session for boundaries (airspaces) in the form of LodBoundary objects.",source:"@site/docs/framework/classes/NearestLodBoundarySearchSession.md",sourceDirName:"framework/classes",slug:"/framework/classes/NearestLodBoundarySearchSession",permalink:"/msfs-avionics-mirror/docs/framework/classes/NearestLodBoundarySearchSession",editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"NearestLodBoundarySearchSession",title:"Class: NearestLodBoundarySearchSession",sidebar_label:"NearestLodBoundarySearchSession",sidebar_position:0,custom_edit_url:null},sidebar:"docsSidebar",previous:{title:"NearestIntersectionSubscription",permalink:"/msfs-avionics-mirror/docs/framework/classes/NearestIntersectionSubscription"},next:{title:"NearestNdbSubscription",permalink:"/msfs-avionics-mirror/docs/framework/classes/NearestNdbSubscription"}},p=[{value:"Constructors",id:"constructors",children:[{value:"constructor",id:"constructor",children:[{value:"Parameters",id:"parameters",children:[],level:4},{value:"Defined in",id:"defined-in",children:[],level:4}],level:3}],level:2},{value:"Properties",id:"properties",children:[{value:"frameBudget",id:"framebudget",children:[],level:3}],level:2},{value:"Methods",id:"methods",children:[{value:"searchNearest",id:"searchnearest",children:[{value:"Parameters",id:"parameters-1",children:[],level:4},{value:"Returns",id:"returns",children:[],level:4},{value:"Defined in",id:"defined-in-1",children:[],level:4}],level:3},{value:"setFilter",id:"setfilter",children:[{value:"Parameters",id:"parameters-2",children:[],level:4},{value:"Returns",id:"returns-1",children:[],level:4},{value:"Defined in",id:"defined-in-2",children:[],level:4}],level:3}],level:2}],c={toc:p};function u(e){var t=e.components,r=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A nearest search session for boundaries (airspaces) in the form of LodBoundary objects."),(0,i.kt)("h2",{id:"constructors"},"Constructors"),(0,i.kt)("h3",{id:"constructor"},"constructor"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"new NearestLodBoundarySearchSession"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"cache"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"session"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"frameBudget"),")"),(0,i.kt)("p",null,"Constructor."),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"cache")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"LodBoundaryCache"},(0,i.kt)("inlineCode",{parentName:"a"},"LodBoundaryCache"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"The boundary cache this search session uses.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"session")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"NearestBoundarySearchSession"},(0,i.kt)("inlineCode",{parentName:"a"},"NearestBoundarySearchSession"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"The nearest boundary facility search session this search session uses.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"frameBudget")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The maximum amount of time allotted per frame to retrieve and process LodBoundary objects, in milliseconds.")))),(0,i.kt)("h4",{id:"defined-in"},"Defined in"),(0,i.kt)("p",null,"src/sdk/navigation/NearestLodBoundarySearchSession.ts:28"),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"framebudget"},"frameBudget"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,i.kt)("strong",{parentName:"p"},"frameBudget"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"number")),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"searchnearest"},"searchNearest"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"searchNearest"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"lat"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"lon"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"radius"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"maxItems"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("a",{parentName:"p",href:"../modules#nearestlodboundarysearchresults"},(0,i.kt)("inlineCode",{parentName:"a"},"NearestLodBoundarySearchResults")),">"),(0,i.kt)("p",null,"Searches for the nearest boundaries around a specified location."),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"lat")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The latitude of the search center, in degrees.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"lon")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The longitude of the search center, in degrees.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"radius")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The radius of the search, in meters.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"maxItems")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The maximum number of items for which to search.")))),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("a",{parentName:"p",href:"../modules#nearestlodboundarysearchresults"},(0,i.kt)("inlineCode",{parentName:"a"},"NearestLodBoundarySearchResults")),">"),(0,i.kt)("p",null,"The nearest search results."),(0,i.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,i.kt)("p",null,"src/sdk/navigation/NearestLodBoundarySearchSession.ts:43"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"setfilter"},"setFilter"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"setFilter"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"classMask"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"void")),(0,i.kt)("p",null,"Sets this session's boundary class filter. The new filter takes effect with the next search executed in this\nsession."),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"classMask")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:"left"},"A bitmask defining the boundary classes to include in the search (",(0,i.kt)("inlineCode",{parentName:"td"},"0"),": exclude, ",(0,i.kt)("inlineCode",{parentName:"td"},"1"),": include). The bit index for each boundary class is equal to the value of the corresponding ",(0,i.kt)("inlineCode",{parentName:"td"},"BoundaryType")," enum.")))),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"void")),(0,i.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,i.kt)("p",null,"src/sdk/navigation/NearestLodBoundarySearchSession.ts:63"))}u.isMDXComponent=!0}}]);