"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[5076],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return c}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),k=s(n),c=i,m=k["".concat(o,".").concat(c)]||k[c]||u[c]||r;return n?a.createElement(m,l(l({ref:t},p),{},{components:n})):a.createElement(m,l({ref:t},p))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=k;var d={};for(var o in t)hasOwnProperty.call(t,o)&&(d[o]=t[o]);d.originalType=e,d.mdxType="string"==typeof e?e:i,l[1]=d;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},2887:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return o},metadata:function(){return s},toc:function(){return p},default:function(){return k}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),l=["components"],d={id:"AirwayBuilder",title:"Class: AirwayBuilder",sidebar_label:"AirwayBuilder",sidebar_position:0,custom_edit_url:null},o=void 0,s={unversionedId:"framework/classes/AirwayBuilder",id:"framework/classes/AirwayBuilder",isDocsHomePage:!1,title:"Class: AirwayBuilder",description:"The Airway Builder.",source:"@site/docs/framework/classes/AirwayBuilder.md",sourceDirName:"framework/classes",slug:"/framework/classes/AirwayBuilder",permalink:"/msfs-avionics-mirror/docs/framework/classes/AirwayBuilder",editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"AirwayBuilder",title:"Class: AirwayBuilder",sidebar_label:"AirwayBuilder",sidebar_position:0,custom_edit_url:null},sidebar:"docsSidebar",previous:{title:"AirspaceSearcher",permalink:"/msfs-avionics-mirror/docs/framework/classes/AirspaceSearcher"},next:{title:"AirwayObject",permalink:"/msfs-avionics-mirror/docs/framework/classes/AirwayObject"}},p=[{value:"Constructors",id:"constructors",children:[{value:"constructor",id:"constructor",children:[{value:"Parameters",id:"parameters",children:[],level:4},{value:"Defined in",id:"defined-in",children:[],level:4}],level:3}],level:2},{value:"Properties",id:"properties",children:[{value:"_hasStarted",id:"_hasstarted",children:[{value:"Defined in",id:"defined-in-1",children:[],level:4}],level:3},{value:"_isDone",id:"_isdone",children:[{value:"Defined in",id:"defined-in-2",children:[],level:4}],level:3},{value:"_waypointsArray",id:"_waypointsarray",children:[{value:"Defined in",id:"defined-in-3",children:[],level:4}],level:3}],level:2},{value:"Accessors",id:"accessors",children:[{value:"hasStarted",id:"hasstarted",children:[{value:"Returns",id:"returns",children:[],level:4},{value:"Defined in",id:"defined-in-4",children:[],level:4}],level:3},{value:"isDone",id:"isdone",children:[{value:"Returns",id:"returns-1",children:[],level:4},{value:"Defined in",id:"defined-in-5",children:[],level:4}],level:3},{value:"waypoints",id:"waypoints",children:[{value:"Returns",id:"returns-2",children:[],level:4},{value:"Defined in",id:"defined-in-6",children:[],level:4}],level:3}],level:2},{value:"Methods",id:"methods",children:[{value:"_step",id:"_step",children:[{value:"Parameters",id:"parameters-1",children:[],level:4},{value:"Returns",id:"returns-3",children:[],level:4},{value:"Defined in",id:"defined-in-7",children:[],level:4}],level:3},{value:"_stepBackward",id:"_stepbackward",children:[{value:"Returns",id:"returns-4",children:[],level:4},{value:"Defined in",id:"defined-in-8",children:[],level:4}],level:3},{value:"_stepForward",id:"_stepforward",children:[{value:"Returns",id:"returns-5",children:[],level:4},{value:"Defined in",id:"defined-in-9",children:[],level:4}],level:3},{value:"setWaypointsArray",id:"setwaypointsarray",children:[{value:"Parameters",id:"parameters-2",children:[],level:4},{value:"Returns",id:"returns-6",children:[],level:4},{value:"Defined in",id:"defined-in-10",children:[],level:4}],level:3},{value:"startBuild",id:"startbuild",children:[{value:"Returns",id:"returns-7",children:[],level:4},{value:"Defined in",id:"defined-in-11",children:[],level:4}],level:3}],level:2}],u={toc:p};function k(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The Airway Builder."),(0,r.kt)("h2",{id:"constructors"},"Constructors"),(0,r.kt)("h3",{id:"constructor"},"constructor"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"new AirwayBuilder"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"_initialWaypoint"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_initialData"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"facilityLoader"),")"),(0,r.kt)("p",null,"Creates an instance of the AirwayBuilder"),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"_initialWaypoint")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"../interfaces/IntersectionFacility"},(0,r.kt)("inlineCode",{parentName:"a"},"IntersectionFacility"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"is the initial intersection facility")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"_initialData")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"../interfaces/AirwaySegment"},(0,r.kt)("inlineCode",{parentName:"a"},"AirwaySegment"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"is the intersection route to build from")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"facilityLoader")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"FacilityLoader"},(0,r.kt)("inlineCode",{parentName:"a"},"FacilityLoader"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"is an instance of the facility loader")))),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,"src/sdk/navigation/FacilityLoader.ts:628"),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"_hasstarted"},"_","hasStarted"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,r.kt)("strong",{parentName:"p"},"_","hasStarted"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," = ",(0,r.kt)("inlineCode",{parentName:"p"},"false")),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,"src/sdk/navigation/FacilityLoader.ts:620"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"_isdone"},"_","isDone"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,r.kt)("strong",{parentName:"p"},"_","isDone"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," = ",(0,r.kt)("inlineCode",{parentName:"p"},"false")),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,"src/sdk/navigation/FacilityLoader.ts:621"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"_waypointsarray"},"_","waypointsArray"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,r.kt)("strong",{parentName:"p"},"_","waypointsArray"),": ",(0,r.kt)("a",{parentName:"p",href:"../interfaces/IntersectionFacility"},(0,r.kt)("inlineCode",{parentName:"a"},"IntersectionFacility")),"[] = ",(0,r.kt)("inlineCode",{parentName:"p"},"[]")),(0,r.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,r.kt)("p",null,"src/sdk/navigation/FacilityLoader.ts:619"),(0,r.kt)("h2",{id:"accessors"},"Accessors"),(0,r.kt)("h3",{id:"hasstarted"},"hasStarted"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," ",(0,r.kt)("strong",{parentName:"p"},"hasStarted"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"Get whether this builder has started loading waypoints"),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"whether this builder has started"),(0,r.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,r.kt)("p",null,"src/sdk/navigation/FacilityLoader.ts:637"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"isdone"},"isDone"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," ",(0,r.kt)("strong",{parentName:"p"},"isDone"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"Get whether this builder is done loading waypoints"),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"whether this builder is done loading waypoints"),(0,r.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,r.kt)("p",null,"src/sdk/navigation/FacilityLoader.ts:645"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"waypoints"},"waypoints"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," ",(0,r.kt)("strong",{parentName:"p"},"waypoints"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,r.kt)("a",{parentName:"p",href:"../interfaces/IntersectionFacility"},(0,r.kt)("inlineCode",{parentName:"a"},"IntersectionFacility")),"[]"),(0,r.kt)("p",null,"Get the airway waypoints"),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,r.kt)("a",{parentName:"p",href:"../interfaces/IntersectionFacility"},(0,r.kt)("inlineCode",{parentName:"a"},"IntersectionFacility")),"[]"),(0,r.kt)("p",null,"the airway waypoints, or null"),(0,r.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,r.kt)("p",null,"src/sdk/navigation/FacilityLoader.ts:653"),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"_step"},"_","step"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"_step"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"stepForward"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayInsertFunc"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,r.kt)("p",null,"Steps through the airway waypoints"),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"stepForward")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"is the direction to step; true = forward, false = backward")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"arrayInsertFunc")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"wpt"),": ",(0,r.kt)("a",{parentName:"td",href:"../interfaces/IntersectionFacility"},(0,r.kt)("inlineCode",{parentName:"a"},"IntersectionFacility")),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"void")),(0,r.kt)("td",{parentName:"tr",align:"left"},"is the arrayInsertFunc")))),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,r.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,r.kt)("p",null,"src/sdk/navigation/FacilityLoader.ts:661"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"_stepbackward"},"_","stepBackward"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"_stepBackward"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,r.kt)("p",null,"Steps Backward through the airway waypoints"),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,r.kt)("p",null,"the step backward function"),(0,r.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,r.kt)("p",null,"src/sdk/navigation/FacilityLoader.ts:694"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"_stepforward"},"_","stepForward"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"_stepForward"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,r.kt)("p",null,"Steps Forward through the airway waypoints"),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,r.kt)("p",null,"the step forward function"),(0,r.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,r.kt)("p",null,"src/sdk/navigation/FacilityLoader.ts:685"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"setwaypointsarray"},"setWaypointsArray"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"setWaypointsArray"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"array"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Sets the array into which this builder will load waypoints."),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"array")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"../interfaces/IntersectionFacility"},(0,r.kt)("inlineCode",{parentName:"a"},"IntersectionFacility")),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"is the array into which the builder will load waypoints")))),(0,r.kt)("h4",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,r.kt)("p",null,"src/sdk/navigation/FacilityLoader.ts:704"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"startbuild"},"startBuild"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"startBuild"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("a",{parentName:"p",href:"../enums/AirwayStatus"},(0,r.kt)("inlineCode",{parentName:"a"},"AirwayStatus")),">"),(0,r.kt)("p",null,"Begins loading waypoints for this builder's parent airway."),(0,r.kt)("h4",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("a",{parentName:"p",href:"../enums/AirwayStatus"},(0,r.kt)("inlineCode",{parentName:"a"},"AirwayStatus")),">"),(0,r.kt)("p",null,"a Promise to return a status code corresponding to Airway.Status when this builder has\nfinished loading waypoints."),(0,r.kt)("h4",{id:"defined-in-11"},"Defined in"),(0,r.kt)("p",null,"src/sdk/navigation/FacilityLoader.ts:713"))}k.isMDXComponent=!0}}]);