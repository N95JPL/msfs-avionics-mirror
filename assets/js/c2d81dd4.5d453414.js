"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[2458],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return f}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),p=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=p(a),f=r,m=s["".concat(c,".").concat(f)]||s[f]||u[f]||l;return a?n.createElement(m,i(i({ref:t},d),{},{components:a})):n.createElement(m,i({ref:t},d))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=s;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},4986:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return d},default:function(){return s}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=["components"],o={id:"FlightPathLegCalculator",title:"Interface: FlightPathLegCalculator",sidebar_label:"FlightPathLegCalculator",sidebar_position:0,custom_edit_url:null},c=void 0,p={unversionedId:"framework/interfaces/FlightPathLegCalculator",id:"framework/interfaces/FlightPathLegCalculator",isDocsHomePage:!1,title:"Interface: FlightPathLegCalculator",description:"A flight path calculator for individual flight plan legs.",source:"@site/docs/framework/interfaces/FlightPathLegCalculator.md",sourceDirName:"framework/interfaces",slug:"/framework/interfaces/FlightPathLegCalculator",permalink:"/msfs-avionics-mirror/docs/framework/interfaces/FlightPathLegCalculator",editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"FlightPathLegCalculator",title:"Interface: FlightPathLegCalculator",sidebar_label:"FlightPathLegCalculator",sidebar_position:0,custom_edit_url:null},sidebar:"docsSidebar",previous:{title:"FlightPathCalculatorOptions",permalink:"/msfs-avionics-mirror/docs/framework/interfaces/FlightPathCalculatorOptions"},next:{title:"FlightPathState",permalink:"/msfs-avionics-mirror/docs/framework/interfaces/FlightPathState"}},d=[{value:"Implemented by",id:"implemented-by",children:[],level:2},{value:"Methods",id:"methods",children:[{value:"calculate",id:"calculate",children:[{value:"Parameters",id:"parameters",children:[],level:4},{value:"Returns",id:"returns",children:[],level:4},{value:"Defined in",id:"defined-in",children:[],level:4}],level:3}],level:2}],u={toc:d};function s(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"A flight path calculator for individual flight plan legs."),(0,l.kt)("h2",{id:"implemented-by"},"Implemented by"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"../classes/AbstractFlightPathLegCalculator"},(0,l.kt)("inlineCode",{parentName:"a"},"AbstractFlightPathLegCalculator")))),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("h3",{id:"calculate"},"calculate"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"calculate"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"legs"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"calculateIndex"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"activeLegIndex"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"state"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"resolveIngressToEgress?"),"): ",(0,l.kt)("a",{parentName:"p",href:"LegCalculations"},(0,l.kt)("inlineCode",{parentName:"a"},"LegCalculations"))),(0,l.kt)("p",null,"Calculates flight path vectors for a flight plan leg and adds the calculations to the leg."),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"legs")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"LegDefinition"},(0,l.kt)("inlineCode",{parentName:"a"},"LegDefinition")),"[]"),(0,l.kt)("td",{parentName:"tr",align:"left"},"A sequence of flight plan legs.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"calculateIndex")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The index of the leg to calculate.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"activeLegIndex")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The index of the active leg.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"state")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"FlightPathState"},(0,l.kt)("inlineCode",{parentName:"a"},"FlightPathState"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The current flight path state.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"resolveIngressToEgress?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,l.kt)("h4",{id:"returns"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"LegCalculations"},(0,l.kt)("inlineCode",{parentName:"a"},"LegCalculations"))),(0,l.kt)("p",null,"The flight plan leg calculations."),(0,l.kt)("h4",{id:"defined-in"},"Defined in"),(0,l.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:51"))}s.isMDXComponent=!0}}]);